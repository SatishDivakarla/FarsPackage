{
    "collab_server" : "",
    "contents" : "#' Read file\n#'\n#' @details This is a simple function that expects a csv filename as argument, checks if the file exists and if\n#' it exists it reads the file to an object and converts it to a data frame.\n#'\n#' @note Note that this function fails if the filename is not passed as argument.\n#'\n#' @param filename A character containing the file name\n#'\n#' @return This function returns a dataframe containing the data from the csv file passed by filename\n#'\n#' @importFrom readr read_csv\n#'\n#' @examples\n#' fars_read(\"accident_2013.csv.bz2\")\n#' fars_read(\"accident_2015.csv.bz2\")\n#'\n#' \\dontrun{\n#' fars_read()\n#' fars_read(accident_2015.csv.bz2)\n#' }\n#'\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n#' Create or construct filename\n#'\n#' @details This is a simple function which expects a year as an argument, converts the year to integer, constructs the\n#' file name by appending year to the filename and returns it.\n#'\n#' @note Note that this function fails if argument year is not passed as argument.\n#'\n#' @param year A character containing the year.\n#'\n#' @return This function returns a final filename having the year.\n#'\n#' @examples\n#' make_filename(\"2001\")\n#' make_filename(1999)\n#'\n#' \\dontrun{\n#' make_filename()\n#' make_filename(\"Test\")\n#' }\n#'\n#'\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n#' Read list of files and returns a dataframe containing all months and years from the files.\n#'\n#' @details This function that expects a list of years, for each year in the list, construct the file name.\n#' Once the file name is created, read the content of file to the dataframe, create new field year\n#' and return month and year fields from dataframe.\n#'\n#'\n#' @note Note that this function fails if the years is not passed as argument.\n#'\n#' @param years A list of characters containing the years\n#'\n#' @return This function returns a dataframe having the list of month and years from the files read based\n#' on the list of years passed as parameter to function. This function also prints a warning if there is any error\n#' while reading the file or processing the data frame.\n#'\n#' @importFrom magrittr \"%>%\"\n#' @importFrom dplyr mutate\n#' @importFrom dplyr select\n#'\n#' @examples\n#' fars_read_years(c(\"2013\", \"2014\"))\n#' fars_read_years(c(2013, 2015))\n#' fars_read_years(2013)\n#'\n#' \\dontrun{\n#' fars_read_years()\n#' fars_read_years(\"1900\")\n#' }\n#'\n#'\nfars_read_years <- function(years) {\n  browser()\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n\n#' Read list of files and returns a dataframe containing list of months and list of records for each year.\n#'\n#' @details This function expects a list of years, reads the content from all the files of these years\n#' using the internal method \\code{\\link{fars_read_years}}  for each year in the list and saves the result\n#' to a data frame. This dataframe is then processed to get a a final dataframe having the summary with\n#' list of months and total number of records for each year.\n#'\n#'\n#' @note Note that this function fails if the years is not passed as argument.\n#'\n#' @param years A list of characters containing the years\n#'\n#' @return This function returns a dataframe having the summary with list of months and number of records\n#' in the files for each year. This function also prints a warning if there is any error\n#' while reading the files or processing the data frame.\n#'\n#' @importFrom magrittr \"%>%\"\n#' @importFrom dplyr bind_rows\n#' @importFrom dplyr group_by\n#' @importFrom dplyr summarize\n#' @importFrom tidyr spread\n#'\n#' @examples\n#' fars_summarize_years(c(\"2013\", \"2014\"))\n#' fars_summarize_years(\"2014\")\n#'\n#' \\dontrun{\n#' fars_summarize_years()\n#' fars_summarize_years(\"1900\")\n#' }\n#'\n#' @export\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n#' Creates a map of the state and plots the points where there is an accident.\n#'\n#' @details This function expects a valid state number and year. This function uses internal method\n#' \\code{\\link{make_filename}} to construct a file name, \\code{\\link{fars_read}} for reading the\n#' file to a dtaframe. Once the dataframe is populated, this function validates if the user passed\n#' state number exists in the dataframe and filters the records that match the state number. The coordinates\n#' in the dataframe are filtered and draws a graph based on the range of latitudes and longitudes and\n#' plots the points.\n#'\n#'\n#' @note This function fails if the state number pased is invalid\n#' @note This function fails if there are no entries of the state and year passed to the function.\n#'\n#' @param state.num A character containing State Number\n#' @param year A character containing a year\n#'\n#' @return This function does not return anything. It draws a plot having a map and the points.\n#'\n#'\n#' @importFrom magrittr \"%>%\"\n#' @importFrom dplyr filter\n#' @importFrom graphics points\n#' @import maps\n#'\n#' @examples\n#' fars_map_state(1, \"2013\")\n#'\n#' \\dontrun{\n#' fars_map_state(1)\n#' fars_map_state(\"2013\")\n#' fars_map_state(1, \"1999\")\n#' }\n#'\n#' @export\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n\n\n",
    "created" : 1490937352677.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1069863167",
    "id" : "2287D921",
    "lastKnownWriteTime" : 1489768090,
    "last_content_update" : 1489768090,
    "path" : "~/CourseraProjects/FarsPackage/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}